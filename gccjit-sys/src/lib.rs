/* automatically generated by rust-bindgen */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 29;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_result {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_location {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_field {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_function {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_block {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_rvalue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_lvalue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_param {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_case {
    _unused: [u8; 0],
}
extern "C" {
    pub fn gcc_jit_context_acquire() -> *mut gcc_jit_context;
}
extern "C" {
    pub fn gcc_jit_context_release(ctxt: *mut gcc_jit_context);
}
pub const gcc_jit_str_option_GCC_JIT_STR_OPTION_PROGNAME: gcc_jit_str_option = 0;
pub const gcc_jit_str_option_GCC_JIT_NUM_STR_OPTIONS: gcc_jit_str_option = 1;
pub type gcc_jit_str_option = u32;
pub const gcc_jit_int_option_GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL: gcc_jit_int_option = 0;
pub const gcc_jit_int_option_GCC_JIT_NUM_INT_OPTIONS: gcc_jit_int_option = 1;
pub type gcc_jit_int_option = u32;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_DEBUGINFO: gcc_jit_bool_option = 0;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE: gcc_jit_bool_option = 1;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE: gcc_jit_bool_option = 2;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE: gcc_jit_bool_option = 3;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_DUMP_SUMMARY: gcc_jit_bool_option = 4;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING: gcc_jit_bool_option = 5;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_SELFCHECK_GC: gcc_jit_bool_option = 6;
pub const gcc_jit_bool_option_GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES: gcc_jit_bool_option = 7;
pub const gcc_jit_bool_option_GCC_JIT_NUM_BOOL_OPTIONS: gcc_jit_bool_option = 8;
pub type gcc_jit_bool_option = u32;
extern "C" {
    pub fn gcc_jit_context_set_str_option(
        ctxt: *mut gcc_jit_context,
        opt: gcc_jit_str_option,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gcc_jit_context_set_int_option(
        ctxt: *mut gcc_jit_context,
        opt: gcc_jit_int_option,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gcc_jit_context_set_bool_option(
        ctxt: *mut gcc_jit_context,
        opt: gcc_jit_bool_option,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gcc_jit_context_set_bool_allow_unreachable_blocks(
        ctxt: *mut gcc_jit_context,
        bool_value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gcc_jit_context_set_bool_use_external_driver(
        ctxt: *mut gcc_jit_context,
        bool_value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gcc_jit_context_add_command_line_option(
        ctxt: *mut gcc_jit_context,
        optname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gcc_jit_context_add_driver_option(
        ctxt: *mut gcc_jit_context,
        optname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gcc_jit_context_compile(ctxt: *mut gcc_jit_context) -> *mut gcc_jit_result;
}
pub const gcc_jit_output_kind_GCC_JIT_OUTPUT_KIND_ASSEMBLER: gcc_jit_output_kind = 0;
pub const gcc_jit_output_kind_GCC_JIT_OUTPUT_KIND_OBJECT_FILE: gcc_jit_output_kind = 1;
pub const gcc_jit_output_kind_GCC_JIT_OUTPUT_KIND_DYNAMIC_LIBRARY: gcc_jit_output_kind = 2;
pub const gcc_jit_output_kind_GCC_JIT_OUTPUT_KIND_EXECUTABLE: gcc_jit_output_kind = 3;
pub type gcc_jit_output_kind = u32;
extern "C" {
    pub fn gcc_jit_context_compile_to_file(
        ctxt: *mut gcc_jit_context,
        output_kind: gcc_jit_output_kind,
        output_path: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gcc_jit_context_dump_to_file(
        ctxt: *mut gcc_jit_context,
        path: *const ::std::os::raw::c_char,
        update_locations: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gcc_jit_context_set_logfile(
        ctxt: *mut gcc_jit_context,
        logfile: *mut FILE,
        flags: ::std::os::raw::c_int,
        verbosity: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gcc_jit_context_get_first_error(
        ctxt: *mut gcc_jit_context,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcc_jit_context_get_last_error(
        ctxt: *mut gcc_jit_context,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcc_jit_result_get_code(
        result: *mut gcc_jit_result,
        funcname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn gcc_jit_result_get_global(
        result: *mut gcc_jit_result,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn gcc_jit_result_release(result: *mut gcc_jit_result);
}
extern "C" {
    pub fn gcc_jit_object_get_context(obj: *mut gcc_jit_object) -> *mut gcc_jit_context;
}
extern "C" {
    pub fn gcc_jit_object_get_debug_string(
        obj: *mut gcc_jit_object,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcc_jit_context_new_location(
        ctxt: *mut gcc_jit_context,
        filename: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
    ) -> *mut gcc_jit_location;
}
extern "C" {
    pub fn gcc_jit_location_as_object(loc: *mut gcc_jit_location) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_type_as_object(type_: *mut gcc_jit_type) -> *mut gcc_jit_object;
}
pub const gcc_jit_types_GCC_JIT_TYPE_VOID: gcc_jit_types = 0;
pub const gcc_jit_types_GCC_JIT_TYPE_VOID_PTR: gcc_jit_types = 1;
pub const gcc_jit_types_GCC_JIT_TYPE_BOOL: gcc_jit_types = 2;
pub const gcc_jit_types_GCC_JIT_TYPE_CHAR: gcc_jit_types = 3;
pub const gcc_jit_types_GCC_JIT_TYPE_SIGNED_CHAR: gcc_jit_types = 4;
pub const gcc_jit_types_GCC_JIT_TYPE_UNSIGNED_CHAR: gcc_jit_types = 5;
pub const gcc_jit_types_GCC_JIT_TYPE_SHORT: gcc_jit_types = 6;
pub const gcc_jit_types_GCC_JIT_TYPE_UNSIGNED_SHORT: gcc_jit_types = 7;
pub const gcc_jit_types_GCC_JIT_TYPE_INT: gcc_jit_types = 8;
pub const gcc_jit_types_GCC_JIT_TYPE_UNSIGNED_INT: gcc_jit_types = 9;
pub const gcc_jit_types_GCC_JIT_TYPE_LONG: gcc_jit_types = 10;
pub const gcc_jit_types_GCC_JIT_TYPE_UNSIGNED_LONG: gcc_jit_types = 11;
pub const gcc_jit_types_GCC_JIT_TYPE_LONG_LONG: gcc_jit_types = 12;
pub const gcc_jit_types_GCC_JIT_TYPE_UNSIGNED_LONG_LONG: gcc_jit_types = 13;
pub const gcc_jit_types_GCC_JIT_TYPE_FLOAT: gcc_jit_types = 14;
pub const gcc_jit_types_GCC_JIT_TYPE_DOUBLE: gcc_jit_types = 15;
pub const gcc_jit_types_GCC_JIT_TYPE_LONG_DOUBLE: gcc_jit_types = 16;
pub const gcc_jit_types_GCC_JIT_TYPE_CONST_CHAR_PTR: gcc_jit_types = 17;
pub const gcc_jit_types_GCC_JIT_TYPE_SIZE_T: gcc_jit_types = 18;
pub const gcc_jit_types_GCC_JIT_TYPE_FILE_PTR: gcc_jit_types = 19;
pub const gcc_jit_types_GCC_JIT_TYPE_COMPLEX_FLOAT: gcc_jit_types = 20;
pub const gcc_jit_types_GCC_JIT_TYPE_COMPLEX_DOUBLE: gcc_jit_types = 21;
pub const gcc_jit_types_GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE: gcc_jit_types = 22;
pub type gcc_jit_types = u32;
extern "C" {
    pub fn gcc_jit_context_get_type(
        ctxt: *mut gcc_jit_context,
        type_: gcc_jit_types,
    ) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_context_get_int_type(
        ctxt: *mut gcc_jit_context,
        num_bytes: ::std::os::raw::c_int,
        is_signed: ::std::os::raw::c_int,
    ) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_type_get_pointer(type_: *mut gcc_jit_type) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_type_get_const(type_: *mut gcc_jit_type) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_type_get_volatile(type_: *mut gcc_jit_type) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_context_new_array_type(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        element_type: *mut gcc_jit_type,
        num_elements: ::std::os::raw::c_int,
    ) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_context_new_field(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        type_: *mut gcc_jit_type,
        name: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_field;
}
extern "C" {
    pub fn gcc_jit_field_as_object(field: *mut gcc_jit_field) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_context_new_struct_type(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        name: *const ::std::os::raw::c_char,
        num_fields: ::std::os::raw::c_int,
        fields: *mut *mut gcc_jit_field,
    ) -> *mut gcc_jit_struct;
}
extern "C" {
    pub fn gcc_jit_context_new_opaque_struct(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        name: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_struct;
}
extern "C" {
    pub fn gcc_jit_struct_as_type(struct_type: *mut gcc_jit_struct) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_struct_set_fields(
        struct_type: *mut gcc_jit_struct,
        loc: *mut gcc_jit_location,
        num_fields: ::std::os::raw::c_int,
        fields: *mut *mut gcc_jit_field,
    );
}
extern "C" {
    pub fn gcc_jit_context_new_union_type(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        name: *const ::std::os::raw::c_char,
        num_fields: ::std::os::raw::c_int,
        fields: *mut *mut gcc_jit_field,
    ) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_context_new_function_ptr_type(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        return_type: *mut gcc_jit_type,
        num_params: ::std::os::raw::c_int,
        param_types: *mut *mut gcc_jit_type,
        is_variadic: ::std::os::raw::c_int,
    ) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_context_new_param(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        type_: *mut gcc_jit_type,
        name: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_param;
}
extern "C" {
    pub fn gcc_jit_param_as_object(param: *mut gcc_jit_param) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_param_as_lvalue(param: *mut gcc_jit_param) -> *mut gcc_jit_lvalue;
}
extern "C" {
    pub fn gcc_jit_param_as_rvalue(param: *mut gcc_jit_param) -> *mut gcc_jit_rvalue;
}
pub const gcc_jit_function_kind_GCC_JIT_FUNCTION_EXPORTED: gcc_jit_function_kind = 0;
pub const gcc_jit_function_kind_GCC_JIT_FUNCTION_INTERNAL: gcc_jit_function_kind = 1;
pub const gcc_jit_function_kind_GCC_JIT_FUNCTION_IMPORTED: gcc_jit_function_kind = 2;
pub const gcc_jit_function_kind_GCC_JIT_FUNCTION_ALWAYS_INLINE: gcc_jit_function_kind = 3;
pub type gcc_jit_function_kind = u32;
extern "C" {
    pub fn gcc_jit_context_new_function(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        kind: gcc_jit_function_kind,
        return_type: *mut gcc_jit_type,
        name: *const ::std::os::raw::c_char,
        num_params: ::std::os::raw::c_int,
        params: *mut *mut gcc_jit_param,
        is_variadic: ::std::os::raw::c_int,
    ) -> *mut gcc_jit_function;
}
extern "C" {
    pub fn gcc_jit_context_get_builtin_function(
        ctxt: *mut gcc_jit_context,
        name: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_function;
}
extern "C" {
    pub fn gcc_jit_function_as_object(func: *mut gcc_jit_function) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_function_get_param(
        func: *mut gcc_jit_function,
        index: ::std::os::raw::c_int,
    ) -> *mut gcc_jit_param;
}
extern "C" {
    pub fn gcc_jit_function_dump_to_dot(
        func: *mut gcc_jit_function,
        path: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gcc_jit_function_new_block(
        func: *mut gcc_jit_function,
        name: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_block;
}
extern "C" {
    pub fn gcc_jit_block_as_object(block: *mut gcc_jit_block) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_block_get_function(block: *mut gcc_jit_block) -> *mut gcc_jit_function;
}
pub const gcc_jit_global_kind_GCC_JIT_GLOBAL_EXPORTED: gcc_jit_global_kind = 0;
pub const gcc_jit_global_kind_GCC_JIT_GLOBAL_INTERNAL: gcc_jit_global_kind = 1;
pub const gcc_jit_global_kind_GCC_JIT_GLOBAL_IMPORTED: gcc_jit_global_kind = 2;
pub type gcc_jit_global_kind = u32;
extern "C" {
    pub fn gcc_jit_context_new_global(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        kind: gcc_jit_global_kind,
        type_: *mut gcc_jit_type,
        name: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_lvalue;
}
extern "C" {
    pub fn gcc_jit_lvalue_as_object(lvalue: *mut gcc_jit_lvalue) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_lvalue_as_rvalue(lvalue: *mut gcc_jit_lvalue) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_rvalue_as_object(rvalue: *mut gcc_jit_rvalue) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_rvalue_get_type(rvalue: *mut gcc_jit_rvalue) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_context_new_rvalue_from_int(
        ctxt: *mut gcc_jit_context,
        numeric_type: *mut gcc_jit_type,
        value: ::std::os::raw::c_int,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_rvalue_from_long(
        ctxt: *mut gcc_jit_context,
        numeric_type: *mut gcc_jit_type,
        value: ::std::os::raw::c_long,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_zero(
        ctxt: *mut gcc_jit_context,
        numeric_type: *mut gcc_jit_type,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_one(
        ctxt: *mut gcc_jit_context,
        numeric_type: *mut gcc_jit_type,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_rvalue_from_double(
        ctxt: *mut gcc_jit_context,
        numeric_type: *mut gcc_jit_type,
        value: f64,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_rvalue_from_ptr(
        ctxt: *mut gcc_jit_context,
        pointer_type: *mut gcc_jit_type,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_null(
        ctxt: *mut gcc_jit_context,
        pointer_type: *mut gcc_jit_type,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_string_literal(
        ctxt: *mut gcc_jit_context,
        value: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_rvalue;
}
pub const gcc_jit_unary_op_GCC_JIT_UNARY_OP_MINUS: gcc_jit_unary_op = 0;
pub const gcc_jit_unary_op_GCC_JIT_UNARY_OP_BITWISE_NEGATE: gcc_jit_unary_op = 1;
pub const gcc_jit_unary_op_GCC_JIT_UNARY_OP_LOGICAL_NEGATE: gcc_jit_unary_op = 2;
pub const gcc_jit_unary_op_GCC_JIT_UNARY_OP_ABS: gcc_jit_unary_op = 3;
pub type gcc_jit_unary_op = u32;
extern "C" {
    pub fn gcc_jit_context_new_unary_op(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        op: gcc_jit_unary_op,
        result_type: *mut gcc_jit_type,
        rvalue: *mut gcc_jit_rvalue,
    ) -> *mut gcc_jit_rvalue;
}
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_PLUS: gcc_jit_binary_op = 0;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_MINUS: gcc_jit_binary_op = 1;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_MULT: gcc_jit_binary_op = 2;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_DIVIDE: gcc_jit_binary_op = 3;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_MODULO: gcc_jit_binary_op = 4;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_BITWISE_AND: gcc_jit_binary_op = 5;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_BITWISE_XOR: gcc_jit_binary_op = 6;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_BITWISE_OR: gcc_jit_binary_op = 7;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_LOGICAL_AND: gcc_jit_binary_op = 8;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_LOGICAL_OR: gcc_jit_binary_op = 9;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_LSHIFT: gcc_jit_binary_op = 10;
pub const gcc_jit_binary_op_GCC_JIT_BINARY_OP_RSHIFT: gcc_jit_binary_op = 11;
pub type gcc_jit_binary_op = u32;
extern "C" {
    pub fn gcc_jit_context_new_binary_op(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        op: gcc_jit_binary_op,
        result_type: *mut gcc_jit_type,
        a: *mut gcc_jit_rvalue,
        b: *mut gcc_jit_rvalue,
    ) -> *mut gcc_jit_rvalue;
}
pub const gcc_jit_comparison_GCC_JIT_COMPARISON_EQ: gcc_jit_comparison = 0;
pub const gcc_jit_comparison_GCC_JIT_COMPARISON_NE: gcc_jit_comparison = 1;
pub const gcc_jit_comparison_GCC_JIT_COMPARISON_LT: gcc_jit_comparison = 2;
pub const gcc_jit_comparison_GCC_JIT_COMPARISON_LE: gcc_jit_comparison = 3;
pub const gcc_jit_comparison_GCC_JIT_COMPARISON_GT: gcc_jit_comparison = 4;
pub const gcc_jit_comparison_GCC_JIT_COMPARISON_GE: gcc_jit_comparison = 5;
pub type gcc_jit_comparison = u32;
extern "C" {
    pub fn gcc_jit_context_new_comparison(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        op: gcc_jit_comparison,
        a: *mut gcc_jit_rvalue,
        b: *mut gcc_jit_rvalue,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_call(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        func: *mut gcc_jit_function,
        numargs: ::std::os::raw::c_int,
        args: *mut *mut gcc_jit_rvalue,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_call_through_ptr(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        fn_ptr: *mut gcc_jit_rvalue,
        numargs: ::std::os::raw::c_int,
        args: *mut *mut gcc_jit_rvalue,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_cast(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        rvalue: *mut gcc_jit_rvalue,
        type_: *mut gcc_jit_type,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_array_access(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        ptr: *mut gcc_jit_rvalue,
        index: *mut gcc_jit_rvalue,
    ) -> *mut gcc_jit_lvalue;
}
extern "C" {
    pub fn gcc_jit_lvalue_access_field(
        struct_or_union: *mut gcc_jit_lvalue,
        loc: *mut gcc_jit_location,
        field: *mut gcc_jit_field,
    ) -> *mut gcc_jit_lvalue;
}
extern "C" {
    pub fn gcc_jit_rvalue_access_field(
        struct_or_union: *mut gcc_jit_rvalue,
        loc: *mut gcc_jit_location,
        field: *mut gcc_jit_field,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_rvalue_dereference_field(
        ptr: *mut gcc_jit_rvalue,
        loc: *mut gcc_jit_location,
        field: *mut gcc_jit_field,
    ) -> *mut gcc_jit_lvalue;
}
extern "C" {
    pub fn gcc_jit_rvalue_dereference(
        rvalue: *mut gcc_jit_rvalue,
        loc: *mut gcc_jit_location,
    ) -> *mut gcc_jit_lvalue;
}
extern "C" {
    pub fn gcc_jit_lvalue_get_address(
        lvalue: *mut gcc_jit_lvalue,
        loc: *mut gcc_jit_location,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_function_new_local(
        func: *mut gcc_jit_function,
        loc: *mut gcc_jit_location,
        type_: *mut gcc_jit_type,
        name: *const ::std::os::raw::c_char,
    ) -> *mut gcc_jit_lvalue;
}
extern "C" {
    pub fn gcc_jit_block_add_eval(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        rvalue: *mut gcc_jit_rvalue,
    );
}
extern "C" {
    pub fn gcc_jit_block_add_assignment(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        lvalue: *mut gcc_jit_lvalue,
        rvalue: *mut gcc_jit_rvalue,
    );
}
extern "C" {
    pub fn gcc_jit_block_add_assignment_op(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        lvalue: *mut gcc_jit_lvalue,
        op: gcc_jit_binary_op,
        rvalue: *mut gcc_jit_rvalue,
    );
}
extern "C" {
    pub fn gcc_jit_block_add_comment(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gcc_jit_block_end_with_conditional(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        boolval: *mut gcc_jit_rvalue,
        on_true: *mut gcc_jit_block,
        on_false: *mut gcc_jit_block,
    );
}
extern "C" {
    pub fn gcc_jit_block_end_with_jump(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        target: *mut gcc_jit_block,
    );
}
extern "C" {
    pub fn gcc_jit_block_end_with_return(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        rvalue: *mut gcc_jit_rvalue,
    );
}
extern "C" {
    pub fn gcc_jit_block_end_with_void_return(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
    );
}
extern "C" {
    pub fn gcc_jit_context_new_case(
        ctxt: *mut gcc_jit_context,
        min_value: *mut gcc_jit_rvalue,
        max_value: *mut gcc_jit_rvalue,
        dest_block: *mut gcc_jit_block,
    ) -> *mut gcc_jit_case;
}
extern "C" {
    pub fn gcc_jit_case_as_object(case_: *mut gcc_jit_case) -> *mut gcc_jit_object;
}
extern "C" {
    pub fn gcc_jit_block_end_with_switch(
        block: *mut gcc_jit_block,
        loc: *mut gcc_jit_location,
        expr: *mut gcc_jit_rvalue,
        default_block: *mut gcc_jit_block,
        num_cases: ::std::os::raw::c_int,
        cases: *mut *mut gcc_jit_case,
    );
}
extern "C" {
    pub fn gcc_jit_context_new_child_context(
        parent_ctxt: *mut gcc_jit_context,
    ) -> *mut gcc_jit_context;
}
extern "C" {
    pub fn gcc_jit_context_dump_reproducer_to_file(
        ctxt: *mut gcc_jit_context,
        path: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn gcc_jit_context_enable_dump(
        ctxt: *mut gcc_jit_context,
        dumpname: *const ::std::os::raw::c_char,
        out_ptr: *mut *mut ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcc_jit_timer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn gcc_jit_timer_new() -> *mut gcc_jit_timer;
}
extern "C" {
    pub fn gcc_jit_timer_release(timer: *mut gcc_jit_timer);
}
extern "C" {
    pub fn gcc_jit_context_set_timer(ctxt: *mut gcc_jit_context, timer: *mut gcc_jit_timer);
}
extern "C" {
    pub fn gcc_jit_context_get_timer(ctxt: *mut gcc_jit_context) -> *mut gcc_jit_timer;
}
extern "C" {
    pub fn gcc_jit_timer_push(timer: *mut gcc_jit_timer, item_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn gcc_jit_timer_pop(timer: *mut gcc_jit_timer, item_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn gcc_jit_timer_print(timer: *mut gcc_jit_timer, f_out: *mut FILE);
}
extern "C" {
    pub fn gcc_jit_rvalue_set_bool_require_tail_call(
        call: *mut gcc_jit_rvalue,
        require_tail_call: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gcc_jit_type_get_aligned(
        type_: *mut gcc_jit_type,
        alignment_in_bytes: usize,
    ) -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_type_get_vector(type_: *mut gcc_jit_type, num_units: usize)
        -> *mut gcc_jit_type;
}
extern "C" {
    pub fn gcc_jit_function_get_address(
        fn_: *mut gcc_jit_function,
        loc: *mut gcc_jit_location,
    ) -> *mut gcc_jit_rvalue;
}
extern "C" {
    pub fn gcc_jit_context_new_rvalue_from_vector(
        ctxt: *mut gcc_jit_context,
        loc: *mut gcc_jit_location,
        vec_type: *mut gcc_jit_type,
        num_elements: usize,
        elements: *mut *mut gcc_jit_rvalue,
    ) -> *mut gcc_jit_rvalue;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
